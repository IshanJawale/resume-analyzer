name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres123
          POSTGRES_USER: postgres
          POSTGRES_DB: resume_analyzer_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up test environment variables
      run: |
        echo "SECRET_KEY=test-secret-key-for-github-actions" >> $GITHUB_ENV
        echo "DEBUG=True" >> $GITHUB_ENV
        echo "DB_ENGINE=django.db.backends.postgresql" >> $GITHUB_ENV
        echo "DB_NAME=resume_analyzer_test" >> $GITHUB_ENV
        echo "DB_USER=postgres" >> $GITHUB_ENV
        echo "DB_PASSWORD=postgres123" >> $GITHUB_ENV
        echo "DB_HOST=localhost" >> $GITHUB_ENV
        echo "DB_PORT=5432" >> $GITHUB_ENV
        echo "ENVIRONMENT=testing" >> $GITHUB_ENV
        echo "CLOUDINARY_CLOUD_NAME=test" >> $GITHUB_ENV
        echo "CLOUDINARY_API_KEY=test" >> $GITHUB_ENV
        echo "CLOUDINARY_SECRET=test" >> $GITHUB_ENV
        echo "GROQ_API_KEY=test" >> $GITHUB_ENV

    - name: Run Django system checks
      run: |
        python manage.py check

    - name: Run database migrations
      run: |
        python manage.py migrate

    - name: Run tests
      run: |
        python manage.py test

    - name: Check for security issues
      run: |
        python manage.py check --deploy

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t resume-analyzer:${{ github.sha }} .
        
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container resume-analyzer:${{ github.sha }}
        sleep 10
        docker logs test-container
        docker stop test-container

  deploy:
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Render
      run: |
        echo "ðŸš€ Triggering deployment to Render..."
        echo "âœ… Tests passed, Docker build successful"
        echo "ðŸ”„ Render will automatically deploy from main branch"
        
    - name: Notify deployment status
      run: |
        echo "ðŸ“§ Deployment notification would go here"
        echo "ðŸŽ‰ Resume Analyzer deployed successfully!"
